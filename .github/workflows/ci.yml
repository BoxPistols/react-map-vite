# GitHub Packagesへのパッケージ公開ワークフロー
# このワークフローは以下の機能を提供します:
# 1. コードの品質チェック（リント・フォーマット）
# 2. ライブラリのビルド
# 3. GitHub Packagesへのパッケージ公開
name: CI/CD

# ワークフローのトリガー設定
on:
    # mainブランチへのプッシュ、またはタグ（v*）が作成された時に実行
    push:
        branches: [main]
        tags: ['v*']
    # mainブランチへのプルリクエスト時に実行
    pull_request:
        branches: [main]
    # GitHubでリリースが作成された時に実行
    release:
        types: [created]
    # 手動実行も可能
    workflow_dispatch:

# 環境変数の設定
env:
    # Huskyフックを無効化（CI環境では不要）
    HUSKY: 0

# 実行するジョブの定義
jobs:
    # リント・ビルドジョブ: コード品質チェックとビルドを行う
    lint-build:
        runs-on: ubuntu-latest
        steps:
            # ステップ1: リポジトリのコードをチェックアウト
            - uses: actions/checkout@v4

            # ステップ2: pnpmパッケージマネージャーのセットアップ
            - name: Setup pnpm & Node.js
              uses: pnpm/action-setup@v2
              with:
                  version: 8

            # ステップ3: Node.jsのセットアップ（キャッシュ機能付き）
            - uses: actions/setup-node@v4
              with:
                  node-version: '20.13.1'
                  cache: 'pnpm' # pnpmのキャッシュを有効化

            # ステップ4: 依存パッケージのインストール
            - name: Install dependencies
              run: pnpm install --frozen-lockfile # バージョンを固定してインストール

            # ステップ5: コードのリントとフォーマットチェック
            - name: Lint & Format
              run: pnpm run fix # package.jsonのfixスクリプトを実行

            # ステップ6: ライブラリのビルド
            - name: Build library
              run: pnpm run build:lib # TypeScript型定義とライブラリをビルド

            # ステップ7: Storybookのビルド（失敗しても続行）
            - name: Build Storybook
              run: pnpm run build:sb
              continue-on-error: true # Storybookビルドが失敗してもワークフローを続行

            # ステップ8: ビルド成果物をアーティファクトとして保存
            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifacts # アーティファクト名
                  path: dist # 保存するディレクトリ
                  retention-days: 7 # 保存期間（7日間）

            # ステップ9: ビルド結果のサマリーを出力
            - name: Build summary
              run: |
                  echo "## ビルド結果" >> $GITHUB_STEP_SUMMARY
                  echo "- パッケージ: $(node -p "require('./package.json').name")" >> $GITHUB_STEP_SUMMARY
                  echo "- バージョン: $(node -p "require('./package.json').version")" >> $GITHUB_STEP_SUMMARY

    # パッケージ公開ジョブ: GitHub Packagesにパッケージを公開する
    publish:
        # lint-buildジョブが成功した後に実行
        needs: lint-build
        # リリースが作成された場合のみ実行
        if: github.event_name == 'release' && github.event.action == 'created'
        runs-on: ubuntu-latest
        # GitHub Packagesへの書き込み権限を設定
        permissions:
            contents: read # リポジトリコンテンツの読み取り権限
            packages: write # パッケージの書き込み権限

        steps:
            # ステップ1: リポジトリのコードをチェックアウト
            - uses: actions/checkout@v4

            # ステップ2: pnpmパッケージマネージャーのセットアップ
            - name: Setup pnpm & Node.js
              uses: pnpm/action-setup@v2
              with:
                  version: 8

            # ステップ3: Node.jsのセットアップ（GitHub Packages用の設定付き）
            - uses: actions/setup-node@v4
              with:
                  node-version: '20.13.1'
                  registry-url: 'https://npm.pkg.github.com' # GitHub Packagesのレジストリ
                  scope: '@boxpistols' # パッケージのスコープ

            # ステップ4: パッケージバージョンとリリースタグの整合性を検証
            - name: Verify version
              run: |
                  PACKAGE_VERSION=$(node -p "require('./package.json').version")
                  RELEASE_VERSION=${GITHUB_REF#refs/tags/v}
                  if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
                    echo "::error::パッケージバージョン($PACKAGE_VERSION)とタグバージョン($RELEASE_VERSION)が異なります"
                    exit 1
                  fi

            # ステップ5: ビルド成果物をダウンロード
            - name: Download artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts # lint-buildジョブで保存したアーティファクト名
                  path: dist # ダウンロード先ディレクトリ

            # ステップ6: 依存パッケージのインストール
            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            # ステップ7: パッケージをGitHub Packagesに公開
            - name: Publish package
              run: pnpm publish --no-git-checks # Gitチェックをスキップして公開
              env:
                  # GitHub Packagesへの認証に必要なトークン
                  # GITHUB_TOKENは自動的に提供される認証トークン
                  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            # ステップ8: 公開成功時のサマリーを出力
            - name: Publish summary
              if: success() # 公開が成功した場合のみ実行
              run: |
                  echo "## パブリッシュ成功 :rocket:" >> $GITHUB_STEP_SUMMARY
                  echo "- パッケージ: $(node -p "require('./package.json').name") v$(node -p "require('./package.json').version")" >> $GITHUB_STEP_SUMMARY
                  echo "- 公開日時: $(date)" >> $GITHUB_STEP_SUMMARY
