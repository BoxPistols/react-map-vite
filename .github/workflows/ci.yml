name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.30

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: Create Biome configuration
        run: |
          cat << 'EOF' > biome.json
          {
            "$schema": "https://biomejs.dev/schemas/1.8.0/schema.json",
            "organizeImports": {
              "enabled": true,
              "ignore": ["**/dist", "**/node_modules/", "**/*.d.ts"]
            },
            "formatter": {
              "enabled": true,
              "formatWithErrors": true,
              "indentStyle": "space",
              "indentWidth": 2,
              "lineEnding": "lf",
              "lineWidth": 80,
              "attributePosition": "auto",
              "ignore": [
                "**/node_modules/**",
                "**/dist/**",
                "**/dist-ssr/**",
                "**/build/**",
                "**/coverage/**",
                "**/.git/**",
                "**/.vscode/**",
                "**/.idea/**",
                "**/.DS_Store",
                "**/yarn.lock",
                "**/package-lock.json",
                "**/yarn-error.log",
                "**/storybook-static/**",
                "**/*.d.ts",
                "**/*.local",
                "**/*.log",
                "**/tailwind.config.js",
                "**/postcss.config.cjs",
                "**/.env"
              ]
            },
            "linter": {
              "enabled": true,
              "rules": {
                "recommended": true
              },
              "ignore": [
                "**/dist/**",
                "**/dist-ssr/**",
                "**/node_modules/**",
                "**/tailwind.config.js",
                "**/postcss.config.cjs",
                "**/storybook-static/**",
                "**/*.d.ts",
                "**/*.local",
                "**/*.log",
                "**/.env",
                "**/.vscode/settings.json"
              ]
            },
            "javascript": {
              "formatter": {
                "quoteStyle": "single"
              }
            },
            "json": {
              "parser": {
                "allowComments": true
              },
              "formatter": {
                "enabled": false
              }
            }
          }
          EOF

      - name: Run Biome Lint
        run: bunx @biomejs/biome lint --config-path=biome.json .

      - name: Cleanup before caching
        run: |
          rm -rf node_modules/.cache
          rm -rf node_modules/.vite
          npm prune --production

      - name: Compress node_modules
        run: tar -czf node_modules.tar.gz node_modules

      - name: Cache compressed node_modules
        uses: actions/cache@v3
        with:
          path: node_modules.tar.gz
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/bun.lockb') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-node-modules-${{ hashFiles('**/bun.lockb') }}-
            ${{ runner.os }}-node-modules-

      - name: Extract node_modules if cached
        if: steps.cache-compressed-node-modules.outputs.cache-hit == 'true'
        run: tar -xzf node_modules.tar.gz
